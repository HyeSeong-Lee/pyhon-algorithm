########################################
#           HW2 (python 3.7)           #
#         Indentation : 1 tap          #
########################################

#import module random for choice()  
import random


# Person class
class Person :
    # initialization : Require parameter (이름, 주민등록번호, 성별)
    def __init__(self, name, ssn, ForM):
        self.__name =   str(name)
        self.__ssn  =   str(ssn)
        self.__ForM =   str(ForM)


    # __str__ : For modify result of print(instance of Person class)
    def __str__(self):
        return "이름 :" + str(self.__name) + "\n" +\
               "주민등록번호 : " + str(self.__ssn) + "\n" +\
               "성별 : " + str(self.__ForM) + "\n"


    #getter/setter
    def getName(self):
        return self.__name
    
    def getSsn(self):
        return self.__ssn
    
    def getForM(self):
        return self.__ForM



""" Complete a Employee class """
# Employee class
class Employee(Person):
    
    # class variables
    TOTAL_EMP = 0   # For current employees count
    Eid_COUNT = 0   # To assign an employee id conut

    
    # construntor : initialization with parameters (Person object, supervisor Eid, salary value)
    def __init__(self, person, supervisor = 0, salary = 0):
        super().__init__(person.getName(), person.getSsn(), person.getForM())
        
        self.__eid        =     str(10000 + Employee.Eid_COUNT)
        self.__supervisor =     str(supervisor)
        self.__salary     =     str(salary)

        Employee.TOTAL_EMP += 1
        Employee.Eid_COUNT += 1
        

    # __str__ : For modify result of print(instance of Person class)
    def __str__(self):
        #이름,주민번호,성별은 getter를 이용하여 가져올 수 있다.
        return "이름 :" + str(self.getName()) + "\n" +\
               "주민등록번호 : " + str(self.getSsn()) + "\n" +\
               "성별 : " + str(self.getForM()) + "\n"+\
               "사원번호 : "+str(self.__eid)+ "\n"+\
               "상사 사원번호 : "+str(self.__supervisor)+"\n"+\
               "월급 : "+str(self.__salary)+"$"+"\n"
               #사원번호, 상사 사원번호, 월급은 오버라이딩으로 얻어짐.
               #private로 선언 후 getter로 얻음.
    # getter/setter
    def getEid(self):
        return self.__eid

    
    def getSupervisor(self):
        return self.__supervisor

    
    def getSalary(self):
        return self.__salary

    
    def setSupervisor(self, supervisor):
        self.__supervisor =     str(supervisor)
    
    def setSalary(self, salary):
        self.__salary =     str(salary)


    # destructor
    def __del__(self):
        Employee.TOTAL_EMP-=1#소멸자를 이용.
        



"""write a function code : return instance of Person class by ssn"""
"""                         parameters : person_list, ssn        """
def getPersonInfo(P, ssn):
    #강의자료에서 코드를 주었다.
    for person in P:
        if person.getSsn()==ssn:
            return person
        else :
            pass

"""write a function code : return instance of Employee class by eid"""
"""                         parameters : emp_list, eid             """
def getEmpInfo(E, eid):
    #getPersonInfo와 같은 원리로 제작.
    for employee in E:
        if employee.getEid()==eid:
            return employee
        else :
            pass

        
"""write a function code : return list of supervisees of eid"""
"""                         parameters : emp_list, eid      """
def getSupervisee(E, eid):
    #주석에서 반환하기를 요구하는 것은 리스트이다.
    a=[]     #빈값으로 초기화.
    for supervisee in E:
        if eid==supervisee.getSupervisor():
            a.append(supervisee)
        else :
            pass
    return a

"""write a function code for print supervisor/see eid realationship chart """
# You can Change the parameters, and Create additional functions, if you want. #
# hint : Using getSupercisee function  ( refer to HW2 ppt )                    #
def findCEO (E):#CEO찾기
    global CEO
    for CEO in E :#리스트를 검사.
        if CEO.getEid()=='10000':#CEO의 사원번호면
            return CEO #CEO를 리턴.
def makeDic(E):#딕셔너리로 모든 사원의 키와 벨류값을 찾아내겠다.
    global dic#전역변수
    dic = {}
    temp = 0#복사할 값
    findCEO(E)
    dic[CEO.getEid()] = temp
    for x in E: #모든 리스트를 검사하겠다.(리그방식으로)
        for y in E:
            if x.getEid() in dic:
                if y.getSupervisor() == x.getEid():#상사번호와 사원번호 비교
                    temp=dic[x.getEid()]#상사의 벨류값은 저장됨
                    dic[y.getEid()]=temp+1#상사의 벨류보다 1이 더 큰값을 벨류로 저장.

def findWay(E,i):
    makeDic(E)#딕셔너리 불러옴
    for x in i:#10000의 직속후임들의 직속후임들만으로 검사
        if x.getEid() in dic:#키에러 방지하는 조건.
            if x!=i[-1] :#마지막값이면
                print(x.getEid(),'->',end=' ')#조건에 맞게 출력.
            else :#아닐때
                if getSupervisee(E,x.getEid())!=[]:#후임이 없을때
                    print(x.getEid(),'->',end=' ')
                else :
                    print(x.getEid())
                    print(' '*6* (dic[x.getEid()]-2),'->',end=' ')
            for y in E: 
                if x.getEid()==y.getSupervisor():
                    if getSupervisee(E,y.getEid())!=[]:
                        print(y.getEid(),'->',end=' ')
                        findWay(E,getSupervisee(E,y.getEid()))
                    else :
                        if y.getEid()!='10042':
                            print(y.getEid())
                            print(' '*6*dic[y.getEid()],'->',end=' ')
                        else:
                            print(y.getEid())
                            print()
def printRelationship(E):
    findCEO(E)#CEO찾기.
    print('10000 ->',end=' ')#10000부터 출력
    findWay(E,getSupervisee(E,CEO.getEid()))#함수 출력               
########################################### DO NOT MODIFY HERE ###########################################
def main():
    person_list = []
    emp_list = []

    p = Person("SH LEE", "999999999", "M")
    person_list.append(p)

    e = Employee(p, "10000", 2345)
    emp_list.append(e)

    print("*"*70)
    print()

    
    """ print Employee getter/setter method : correct -> 5 points """
    print(e.getName())
    print(e.getSsn())
    print(e.getForM())
    print(e.getEid())
    print(e.getSupervisor())
    print(e.getSalary())
    
    e.setSupervisor("None")
    e.setSalary(3456)
    print(e.getSupervisor())
    print(e.getSalary())
    print()
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


    print(getPersonInfo(person_list, p.getSsn()))
    print()

    
    """ print getEmpInfo() function and __str__() method : correct -> 8 points """
    print(getEmpInfo(emp_list, e.getEid()))
    print()
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    
    person_list = []
    emp_list = []
    del p
    del e
    Employee.TOTAL_EMP = 0
    Employee.Eid_COUNT = 0


    
    # For storing person in person_list #
    # Using "person.txt"file            #
    with open("person.txt", "r") as f_person:
        for line in f_person.readlines():
            person_info = line.rstrip().split("\t")

            p = Person( person_info[0], person_info[1], person_info[2] )
            person_list.append(p)
    

    # It is similar to person_list storing code, but requires processing of the hire and retirement. #
    # Also, Provide handling of retired supervisee                                                   #
    # Using getPersonInfo(), getEmpInfo(), getSupervisee() functions                                 #
    #       "Hire&RetirementLOG.txt" file, import module random for choice()                         #
    
    with open("Hire&RetirementLOG.txt", "r") as f_log:
        for line in f_log.readlines():
            log = line.rstrip().split("\t")
            
            if (log[0] == "Hire"):
                e = Employee( getPersonInfo(person_list, log[1]), log[3], log[4] )
                emp_list.append(e)

            elif(log[0] == "Retirement"):                
                e = getEmpInfo(emp_list, log[1])
                
                eid = e.getEid()
                super_eid = e.getSupervisor()
                
                emp_list.pop(emp_list.index(e))
                del e

                """  Operating getSupervisee() function : correct -> 5 points  """
                s = getSupervisee(emp_list, super_eid)
                e = getSupervisee(emp_list, eid)
    
                if s != []:
                    em = random.choice(s)

                    for emp in e:
                        emp.setSupervisor(em.getEid())
                else : 
                    
                    for emp in e:
                        emp.setSupervisor("10000")
                """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

                
    print("*"*70, end = "\n\n")
    index = 0
    for emp in emp_list:
        if index % 10 == 0:     # Avoid too much output
            print(emp)
        index += 1
        
    print("*"*70, end = "\n\n")


    
    """  print supervisor/see realationship chart : correct -> 15 points """
    printRelationship(emp_list)
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    
    
    print("*"*70, end = "\n\n")
    
    """print class variables : correct -> 2 points"""

    print("NUM OF CURRENT EMPLOYEES     : ", Employee.TOTAL_EMP)
    print()
    print("COUNT FOR ASSIGN EMPLOYEE ID : ", Employee.Eid_COUNT)
    print("\n"+"*"*70)

main()
###########################################################################
